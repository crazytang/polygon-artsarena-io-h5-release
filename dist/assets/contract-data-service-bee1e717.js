var g=Object.defineProperty;var m=(s,t,a)=>t in s?g(s,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):s[t]=a;var o=(s,t,a)=>(m(s,typeof t!="symbol"?t+"":t,a),a);import{$ as u,am as d,aI as c}from"./index-1e3b5e9c.js";class w{constructor(t,a,e,i,n){o(this,"contract_name");o(this,"contract_address");o(this,"abi");o(this,"chain_id");o(this,"network_name");this.contract_name=t,this.contract_address=a,this.abi=e,this.chain_id=i,this.network_name=n}}const r=class r{constructor(){}static async getL1NFTBattlePoolData(){const t=u(),a="NFTBattlePool",e=r.gateway+"/contract/"+t+"/"+a,n=(await d.get(e)).data.data;return new w(n.contractName,n.contractAddress,n.abi,n.chainId,n.networkName)}static async getL2BattleData(t){if(!c(t))throw new Error("invalid l2 chain id");const a="Battle",e=r.gateway+"/contract/"+t+"/"+a,n=(await d.get(e)).data.data;return new w(n.contractName,n.contractAddress,n.abi,n.chainId,n.networkName)}static async getL2BattlePoolData(t){if(!c(t))throw new Error("invalid l2 chain id");const a="BattlePool",e=r.gateway+"/contract/"+t+"/"+a,n=(await d.get(e)).data.data;return new w(n.contractName,n.contractAddress,n.abi,n.chainId,n.networkName)}static async getCreateMockNFTData(t){if(!c(t))throw new Error("invalid l1 chain id");const a="CreateMockNFT";return await r._request(t,a)}static async getMagnifierNFTData(t){if(!c(t))throw new Error("invalid l2 chain id");const a="MagnifierNFT";return await r._request(t,a)}static async getMagnifierBuyData(t){if(!c(t))throw new Error("invalid l2 chain id");const a="MagnifierBuy";return await r._request(t,a)}static async getMagnifierAirDropData(t){if(!c(t))throw new Error("invalid l2 chain id");const a="MagnifierAirDrop";return await r._request(t,a)}static async getMagnifierAirDropForOldUsersData(t){const a="MagnifierAirDropForOldUsers";return await r._request(t,a)}static async getCreateNFTCollectionData(t){if(!c(t))throw new Error("invalid l1 chain id");const a="CreateNFTCollection";return await r._request(t,a)}static async getNFTCollectionData(t){if(!c(t))throw new Error("invalid l1 chain id");const a="NFTCollection";return await r._request(t,a)}static async getNFTMarketData(t){const a="NFTMarket";return await r._request(t,a)}static async _request(t,a){const e=r.gateway+"/contract/"+t+"/"+a,n=(await d.get(e)).data.data;return new w(n.contractName,n.contractAddress,n.abi,n.chainId,n.networkName)}};o(r,"gateway","/api");let l=r;export{l as C};
